{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Blockfrost.io ~ API Documentation",
    "description" : "Blockfrost is an API as a service that allows users to interact with the Cardano blockchain and parts of its ecosystem.\n\n## Authentication\n\nAfter signing up on https://blockfrost.io, a `project_id` token is automatically generated for each project.\nHTTP header of your request MUST include this `project_id` in order to authenticate against Blockfrost servers.\n\n## Available networks\n\nAt the moment, you can use the following networks. Please, note that each network has its own `project_id`.\n\n<table>\n  <tr><td><b>Network</b></td><td><b>Endpoint</b></td></tr>\n  <tr><td>Cardano mainnet</td><td><tt>https://cardano-mainnet.blockfrost.io/api/v0</td></tt></tr>\n  <tr><td>Cardano testnet</td><td><tt>https://cardano-testnet.blockfrost.io/api/v0</tt></td></tr>\n  <tr><td>InterPlanetary File System</td><td><tt>https://ipfs.blockfrost.io/api/v0</tt></td></tr>\n</table>\n\n## Concepts\n\n* All endpoints return either a JSON object or an array.\n* Data is returned in *ascending* (oldest first, newest last) order.\n  * You might use the `?order=desc` query parameter to reverse this order.\n* By default, we return 100 results at a time. You have to use `?page=2` to list through the results.\n* All time and timestamp related fields are in milliseconds of UNIX time.\n* All amounts are returned in Lovelaces, where 1 ADA = 1 000 000 Lovelaces.\n* Addresses, accounts and pool IDs are in Bech32 format.\n* All values are case sensitive.\n* All hex encoded values are lower case.\n* Examples are not based on real data. Any resemblance to actual events is purely coincidental.\n* We allow to upload files up to 100MB of size to IPFS. This might increase in the future.\n\n## Errors\n\n### HTTP Status codes\n\nThe following are HTTP status code your application might receive when reaching Blockfrost endpoints and\nit should handle all of these cases.\n\n* HTTP `400` return code is used when the request is not valid.\n* HTTP `402` return code is used when the projects exceed their daily request limit.\n* HTTP `403` return code is used when the request is not authenticated.\n* HTTP `404` return code is used when the resource doesn't exist.\n* HTTP `418` return code is used when the user has been auto-banned for flooding too much after previously receiving error code `402` or `429`.\n* HTTP `429` return code is used when the user has sent too many requests in a given amount of time and therefore has been rate-limited.\n* HTTP `500` return code is used when our endpoints are having a problem.\n\n### Error codes\n\nAn internal error code number is used for better indication of the error in question. It is passed using the following payload.\n\n```json\n{\n  \"status_code\": 403,\n  \"error\": \"Forbidden\",\n  \"message\": \"Invalid project token.\"\n}\n```\n## Limits\n\n There are two types of limits we are enforcing. The first depends on your plan and is the number of request we allow per day. We defined\n the day from midnight to midnight of UTC time. The second is rate limiting, where we limit an end user to 10 requests per second after a period\n of 5 second burst. We believe this should be sufficient for most of the use cases. If it is not and you have a specific use case, please get in touch with us, and\n we will make sure to take it into account as much as we can.\n",
    "termsOfService" : "https://blockfrost.io/terms",
    "contact" : {
      "name" : "Blockfrost Team",
      "url" : "https://blockfrost.io",
      "email" : "contact@blockfrost.io"
    },
    "license" : {
      "name" : "MIT",
      "url" : "https://opensource.org/licenses/MIT"
    },
    "version" : "0.1.10",
    "x-logo" : {
      "url" : "https://staging.blockfrost.io/images/logo.svg",
      "altText" : "Blockfrost"
    }
  },
  "servers" : [ {
    "url" : "https://cardano-mainnet.blockfrost.io/api/v0/",
    "description" : "Cardano Mainnet network"
  }, {
    "url" : "https://cardano-testnet.blockfrost.io/api/v0/",
    "description" : "Cardano Testnet network"
  }, {
    "url" : "https://localhost:3000",
    "description" : "local"
  } ],
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "Health"
  }, {
    "name" : "Cardano » Blocks"
  }, {
    "name" : "Cardano » Epochs"
  }, {
    "name" : "Cardano » Transactions"
  }, {
    "name" : "Cardano » Metadata"
  }, {
    "name" : "Cardano » Pools"
  }, {
    "name" : "Cardano » Accounts"
  }, {
    "name" : "Cardano » Addresses"
  }, {
    "name" : "Cardano » Assets"
  }, {
    "name" : "Cardano » Ledger"
  }, {
    "name" : "IPFS » Add"
  }, {
    "name" : "IPFS » Gateway"
  }, {
    "name" : "IPFS » Pins"
  } ],
  "paths" : {
    "/" : {
      "get" : {
        "tags" : [ "Health" ],
        "summary" : "Root endpoint",
        "description" : "Root endpoint has no other function than to point end users to documentation.\n",
        "responses" : {
          "200" : {
            "description" : "Information pointing to the documentation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        },
        "security" : [ ]
      }
    },
    "/health" : {
      "get" : {
        "tags" : [ "Health" ],
        "summary" : "Backend health status",
        "description" : "Return backend status as a boolean. Your application\n    should handle situations when backend for the given chain is unavailable.\n",
        "responses" : {
          "200" : {
            "description" : "Return the boolean indicating the health of the backend.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        },
        "security" : [ ]
      }
    },
    "/health/clock" : {
      "get" : {
        "tags" : [ "Health" ],
        "summary" : "Current backend time",
        "description" : "This endpoint provides the current UNIX time. Your application might\nuse this to verify if the client clock is not out of sync.\n",
        "responses" : {
          "200" : {
            "description" : "Return the current UNIX time in milliseconds.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        },
        "security" : [ ]
      }
    },
    "/blocks/latest" : {
      "get" : {
        "tags" : [ "Cardano » Blocks" ],
        "summary" : "Latest block",
        "description" : "Return the latest block available to the backends, also known as the\ntip of the blockchain.\n",
        "responses" : {
          "200" : {
            "description" : "Return the contents of the latest block.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/block_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/{hash_or_number}" : {
      "get" : {
        "tags" : [ "Cardano » Blocks" ],
        "summary" : "Specific block",
        "description" : "Return the content of a requested block.\n",
        "parameters" : [ {
          "name" : "hash_or_number",
          "in" : "path",
          "description" : "Hash of the requested block.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string or block number."
          },
          "example" : "4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the contents of the block",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/block_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/{hash_or_number}/next" : {
      "get" : {
        "tags" : [ "Cardano » Blocks" ],
        "summary" : "Listing of next blocks",
        "description" : "Return the list of blocks following a specific block.\n",
        "parameters" : [ {
          "name" : "hash_or_number",
          "in" : "path",
          "description" : "Hash of the requested block.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string or block number."
          },
          "example" : "5ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the contents of the block.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/block_content_array"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/{hash_or_number}/previous" : {
      "get" : {
        "tags" : [ "Cardano » Blocks" ],
        "summary" : "Listing of previous blocks",
        "description" : "Return the list of blocks preceding a specific block.\n",
        "parameters" : [ {
          "name" : "hash_or_number",
          "in" : "path",
          "description" : "Hash of the requested block",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string or block number."
          },
          "example" : "4873401"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the contents of the block",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/block_content_array"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/{hash_or_number}/txs" : {
      "get" : {
        "tags" : [ "Cardano » Blocks" ],
        "summary" : "Block transactions",
        "description" : "Return the transactions within the block.",
        "parameters" : [ {
          "name" : "hash_or_number",
          "in" : "path",
          "description" : "Hash of the requested block.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string or block number."
          },
          "example" : "4873401"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "Ordered by tx index in the block.\nThe ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the transactions within the block.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/block_content_txs"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/genesis" : {
      "get" : {
        "tags" : [ "Cardano » Ledger" ],
        "summary" : "Blockchain genesis",
        "description" : "Return the information about blockchain genesis.",
        "responses" : {
          "200" : {
            "description" : "Return the genesis parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/genesis_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/latest" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Latest epoch",
        "description" : "Return the information about the latest, therefore current, epoch.",
        "responses" : {
          "200" : {
            "description" : "Return the data about the epoch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/{number}" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Specific epoch",
        "description" : "Return the content of the requested epoch.",
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "Number of the epoch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "225"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the epoch data.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/{number}/next" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Listing of next epochs",
        "description" : "Return the list of epochs following a specific epoch.",
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "Number of the requested epoch.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 225
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the data about the epoch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_content_array"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/{number}/previous" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Listing of previous epochs",
        "description" : "Return the list of epochs preceding a specific epoch.",
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "Number of the epoch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 225
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the epoch data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_content_array"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/{number}/stakes" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Stake distribution",
        "description" : "Return the active stake distribution for the epoch specified.",
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "Number of the epoch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 225
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the data about the epoch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_stake_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/{number}/stakes/{pool_id}" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Stake distribution by pool",
        "description" : "Return the active stake distribution for the epoch specified by stake pool.",
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "Number of the epoch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 225
        }, {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Stake pool ID to filter",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the data about the epoch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_stake_pool_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/{number}/blocks" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Block distribution",
        "description" : "Return the blocks minted for the epoch specified.",
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "Number of the epoch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 225
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the data about the epoch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_block_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/{number}/blocks/{pool_id}" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Block distribution",
        "description" : "Return the block minted for the epoch specified by stake pool.",
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "Number of the epoch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 225
        }, {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Stake pool ID to filter",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the data about the epoch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_block_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/epochs/{number}/parameters" : {
      "get" : {
        "tags" : [ "Cardano » Epochs" ],
        "summary" : "Protocol parameters",
        "description" : "Return the protocol parameters for the epoch specified.",
        "parameters" : [ {
          "name" : "number",
          "in" : "path",
          "description" : "Number of the epoch",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          },
          "example" : 225
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the data about the epoch",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/epoch_param_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Specific transaction",
        "description" : "Return content of the requested transaction.",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string."
          },
          "example" : "6e5f825c42c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the contents of the transaction.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tx_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}/utxos" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Transaction UTXOs",
        "description" : "Return the inputs and UTXOs of the specific transaction.",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string"
          },
          "example" : "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the contents of the transaction.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tx_content_utxo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}/stakes" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Transaction stake addresses certificates",
        "description" : "Obtain information about (de)registration of stake addresses within a transaction.\n",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string."
          },
          "example" : "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Obtain information about (de)registration of stake addresses within a transaction.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/tx_content_stake_addr"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}/delegations" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Transaction delegation certificates",
        "description" : "Obtain information about delegation certificates of a specific transaction.\n",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string"
          },
          "example" : "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Obtain information about delegation certificates of a specific transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/tx_content_delegations"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}/withdrawals" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Transaction withdrawal",
        "description" : "Obtain information about withdrawals of a specific transaction.",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string"
          },
          "example" : "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Obtain information about withdrawals of a specific transaction.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/tx_content_withdrawals"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}/pool_updates" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Transaction stake pool registration and update certificates",
        "description" : "Obtain information about stake pool registration and update certificates of a specific transaction.\n",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string"
          },
          "example" : "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Obtain information about stake pool certificates of a specific transaction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/tx_content_pool_certs"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}/pool_retires" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Transaction stake pool retirement certificates",
        "description" : "Obtain information about stake pool retirements within a specific transaction.\n",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string."
          },
          "example" : "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Obtain information about stake pool retirements within a specific transaction.\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/tx_content_pool_retires"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}/metadata" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Transaction metadata",
        "description" : "Obtain the transaction metadata.",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string."
          },
          "example" : "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Obtain information about stake pool retirements within a specific transaction.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tx_content_metadata"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/txs/{hash}/metadata/cbor" : {
      "get" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Transaction metadata in CBOR",
        "description" : "Obtain the transaction metadata in CBOR.",
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the requested transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "format" : "64-character case-sensitive hexadecimal string."
          },
          "example" : "6e5f825c82c1c6d6b77f2a14092f3b78c8f1b66db6f4cf8caec1555b6f967b3b"
        } ],
        "responses" : {
          "200" : {
            "description" : "Obtain information about stake pool retirements within a specific transaction.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tx_content_metadata_cbor"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/tx/submit" : {
      "post" : {
        "tags" : [ "Cardano » Transactions" ],
        "summary" : "Submit a transaction",
        "description" : "Submit a base64 encoding serialized transaction to the network.",
        "parameters" : [ {
          "name" : "Content-Type",
          "in" : "header",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "application/cbor" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the ID of the submitted transaction.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "maxLength" : 64,
                  "minLength" : 64,
                  "type" : "string",
                  "format" : "hex",
                  "example" : "d1662b24fa9fe985fc2dce47455df399cb2e31e1e1819339e885801cc3578908"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{stake_address}" : {
      "get" : {
        "tags" : [ "Cardano » Accounts" ],
        "summary" : "Specific account address",
        "description" : "Obtain information about a specific stake account.\n",
        "parameters" : [ {
          "name" : "stake_address",
          "in" : "path",
          "description" : "Bech32 stake address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account content.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{stake_address}/rewards" : {
      "get" : {
        "tags" : [ "Cardano » Accounts" ],
        "summary" : "Account reward history",
        "description" : "Obtain information about the history of a specific account.\n",
        "parameters" : [ {
          "name" : "stake_address",
          "in" : "path",
          "description" : "Bech32 stake address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account content.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_reward_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{stake_address}/history" : {
      "get" : {
        "tags" : [ "Cardano » Accounts" ],
        "summary" : "Account history",
        "description" : "Obtain information about the history of a specific account.\n",
        "parameters" : [ {
          "name" : "stake_address",
          "in" : "path",
          "description" : "Bech32 stake address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account content.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_history_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{stake_address}/delegations" : {
      "get" : {
        "tags" : [ "Cardano » Accounts" ],
        "summary" : "Account delegation history",
        "description" : "Obtain information about the delegation of a specific account.",
        "parameters" : [ {
          "name" : "stake_address",
          "in" : "path",
          "description" : "Bech32 stake address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account delegations content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_delegation_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{stake_address}/registrations" : {
      "get" : {
        "tags" : [ "Cardano » Accounts" ],
        "summary" : "Account registration history",
        "description" : "Obtain information about the registrations and deregistrations of a specific account.\n",
        "parameters" : [ {
          "name" : "stake_address",
          "in" : "path",
          "description" : "Bech32 stake address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account registration content.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_registration_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{stake_address}/addresses" : {
      "get" : {
        "tags" : [ "Cardano » Accounts" ],
        "summary" : "Account associated addresses",
        "description" : "Obtain information about the addresses of a specific account.",
        "parameters" : [ {
          "name" : "stake_address",
          "in" : "path",
          "description" : "Bech32 stake address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "stake1u9ylzsgxaa6xctf4juup682ar3juj85n8tx3hthnljg47zctvm3rc"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account addresses content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/account_addresses_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/metadata/txs/labels" : {
      "get" : {
        "tags" : [ "Cardano » Metadata" ],
        "summary" : "Transaction metadata labels",
        "description" : "List of all used transaction metadata labels.\n",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account delegations content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tx_metadata_labels"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/metadata/txs/labels/{label}" : {
      "get" : {
        "tags" : [ "Cardano » Metadata" ],
        "summary" : "Transaction metadata content in JSON",
        "description" : "Transaction metadata per label.",
        "parameters" : [ {
          "name" : "label",
          "in" : "path",
          "description" : "Metadata label",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "1990"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account delegations content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tx_metadata_label_json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/metadata/txs/labels/{label}/cbor" : {
      "get" : {
        "tags" : [ "Cardano » Metadata" ],
        "summary" : "Transaction metadata content in CBOR",
        "description" : "Transaction metadata per label.",
        "parameters" : [ {
          "name" : "label",
          "in" : "path",
          "description" : "Metadata label",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "1990"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the account delegations content in CBOR",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/tx_metadata_label_cbor"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{address}" : {
      "get" : {
        "tags" : [ "Cardano » Addresses" ],
        "summary" : "Specific address",
        "description" : "Obtain information about a specific address.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Bech32 address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the address content.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/address_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{address}/total" : {
      "get" : {
        "tags" : [ "Cardano » Addresses" ],
        "summary" : "Address' details",
        "description" : "Obtain details about an address.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Bech32 address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the address' details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/address_content_total"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{address}/utxos" : {
      "get" : {
        "tags" : [ "Cardano » Addresses" ],
        "summary" : "Address' UTXOs",
        "description" : "UTXOs of the address.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Bech32 address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "Ordered by tx index in the block.\nThe ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the address content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/address_utxo_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/addresses/{address}/txs" : {
      "get" : {
        "tags" : [ "Cardano » Addresses" ],
        "summary" : "Address' transactions",
        "description" : "Transactions on the address.",
        "parameters" : [ {
          "name" : "address",
          "in" : "path",
          "description" : "Bech32 address.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The numbers of pools per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the address content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/address_txs_content"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "List of stake pools",
        "description" : "List of registered stake pools.",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The numbers of pools per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the list of pools.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool_list"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/retired" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "List of retired stake pools",
        "description" : "List of already retired pools.",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The numbers of pools per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool information content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool_list_retire"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/retiring" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "List of retiring stake pools",
        "description" : "List of stake pools retiring in the upcoming epochs",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool information content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool_list_retire"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/{pool_id}" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "Specific stake pool",
        "description" : "Pool information.",
        "parameters" : [ {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Bech32 or hexadecimal pool ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool information content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/{pool_id}/history" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "Stake pool history",
        "description" : "History of stake pool parameters over epochs.\n",
        "parameters" : [ {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Bech32 or hexadecimal pool ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool information content.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool_history"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/{pool_id}/metadata" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "Stake pool metadata",
        "description" : "Stake pool registration metadata.\n",
        "parameters" : [ {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Bech32 or hexadecimal pool ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool metadata content.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/{pool_id}/relays" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "Stake pool relays",
        "description" : "Relays of a stake pool.",
        "parameters" : [ {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Bech32 or hexadecimal pool ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool relays information content.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool_relays"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/{pool_id}/delegators" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "Stake pool delegators",
        "description" : "List of current stake pools delegators.",
        "parameters" : [ {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Bech32 or hexadecimal pool ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool delegations.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool_delegators"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/{pool_id}/blocks" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "Stake pool blocks",
        "description" : "List of stake pools blocks.",
        "parameters" : [ {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Bech32 or hexadecimal pool ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool block list",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool_blocks"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/pools/{pool_id}/updates" : {
      "get" : {
        "tags" : [ "Cardano » Pools" ],
        "summary" : "Stake pool updates",
        "description" : "List of certificate updates to the stake pool.",
        "parameters" : [ {
          "name" : "pool_id",
          "in" : "path",
          "description" : "Bech32 or hexadecimal pool ID.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the pool updates history",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/pool_updates"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/assets" : {
      "get" : {
        "tags" : [ "Cardano » Assets" ],
        "summary" : "Assets",
        "description" : "List of assets.",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return list of assets",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/assets"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/assets/{asset}" : {
      "get" : {
        "tags" : [ "Cardano » Assets" ],
        "summary" : "Specific asset",
        "description" : "Information about a specific asset",
        "parameters" : [ {
          "name" : "asset",
          "in" : "path",
          "description" : "Concatenation of the policy_id and hex-encoded asset_name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the information about a specific asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/asset"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/assets/{asset}/history" : {
      "get" : {
        "tags" : [ "Cardano » Assets" ],
        "summary" : "Asset history",
        "description" : "History of a specific asset",
        "parameters" : [ {
          "name" : "asset",
          "in" : "path",
          "description" : "Concatenation of the policy_id and hex-encoded asset_name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the information about the history of a specific asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/asset_history"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/assets/{asset}/txs" : {
      "get" : {
        "tags" : [ "Cardano » Assets" ],
        "summary" : "Asset transactions",
        "description" : "List of a specific asset transactions",
        "parameters" : [ {
          "name" : "asset",
          "in" : "path",
          "description" : "Concatenation of the policy_id and hex-encoded asset_name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the information about the history of a specific asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/asset_txs"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/assets/{asset}/addresses" : {
      "get" : {
        "tags" : [ "Cardano » Assets" ],
        "summary" : "Asset addresses",
        "description" : "List of a addresses containing a specific asset",
        "parameters" : [ {
          "name" : "asset",
          "in" : "path",
          "description" : "Concatenation of the policy_id and hex-encoded asset_name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the information about the history of a specific asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/asset_addresses"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/assets/policy/{policy_id}" : {
      "get" : {
        "tags" : [ "Cardano » Assets" ],
        "summary" : "Assets of a specific policy",
        "description" : "List of asset minted under a specific policy",
        "parameters" : [ {
          "name" : "policy_id",
          "in" : "path",
          "description" : "Specific policy_id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "476039a0949cf0b22f6a800f56780184c44533887ca6e821007840c3"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the information about a specific asset",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/asset_policy"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/ipfs/add" : {
      "post" : {
        "tags" : [ "IPFS » Add" ],
        "summary" : "Add a file or directory to IPFS",
        "description" : "You need to `/ipfs/pin/add` an object to avoid it being garbage collected. This usage\nis being counted in your user account quota.\n",
        "responses" : {
          "200" : {
            "description" : "Returns information about added IPFS object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        },
        "x-codeSamples" : [ {
          "lang" : "curl",
          "source" : "curl \"https://ipfs.blockfrost.io/api/v0/ipfs/add\" \\\n  -X POST \\\n  -H \"project_id: $PROJECT_ID\" \\\n  -F \"file=@./README.md\"\n"
        } ]
      },
      "servers" : [ {
        "url" : "https://ipfs.blockfrost.io/"
      } ]
    },
    "/ipfs/gateway/{IPFS_path}" : {
      "get" : {
        "tags" : [ "IPFS » Gateway" ],
        "summary" : "Relay to an IPFS gateway",
        "description" : "Retrieve an object from the IFPS gateway (useful if you do not want to rely on a public gateway, such as `ipfs.blockfrost.dev`).",
        "parameters" : [ {
          "name" : "IPFS_path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Path to the IPFS object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the object content"
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://ipfs.blockfrost.io/"
      } ]
    },
    "/ipfs/pin/add/{IPFS_path}" : {
      "post" : {
        "tags" : [ "IPFS » Pins" ],
        "summary" : "Pin an object",
        "description" : "Pinned objects are counted in your user storage quota.",
        "parameters" : [ {
          "name" : "IPFS_path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "Path to the IPFS object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns pinned object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://ipfs.blockfrost.io/"
      } ]
    },
    "/ipfs/pin/list/" : {
      "get" : {
        "tags" : [ "IPFS » Pins" ],
        "description" : "List objects pinned to local storage",
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "The number of results displayed on one page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "maximum" : 100,
            "type" : "integer",
            "default" : 100
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "The page number for listing the results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "default" : 1
          }
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "The ordering of items from the point of view of the blockchain,\nnot the page listing itself. By default, we return oldest first, newest last.\n",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "asc",
            "enum" : [ "asc", "desc" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns pinned objects",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/inline_response_200_6"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://ipfs.blockfrost.io/"
      } ]
    },
    "/ipfs/pin/list/{IPFS_path}" : {
      "get" : {
        "tags" : [ "IPFS » Pins" ],
        "description" : "List objects pinned to local storage",
        "parameters" : [ {
          "name" : "IPFS_path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "The path to the IPFS object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the pins pinned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://ipfs.blockfrost.io/"
      } ]
    },
    "/ipfs/pin/remove/{IPFS_path}" : {
      "post" : {
        "tags" : [ "IPFS » Pins" ],
        "description" : "Remove pinned objects from local storage",
        "parameters" : [ {
          "name" : "IPFS_path",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string",
            "description" : "The path to the IPFS object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the pins removed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      },
      "servers" : [ {
        "url" : "https://ipfs.blockfrost.io/"
      } ]
    },
    "/metrics/" : {
      "get" : {
        "tags" : [ "Metrics" ],
        "summary" : "Blockfrost usage metrics",
        "description" : "History of your Blockfrost usage metrics in the past 30 days.",
        "responses" : {
          "200" : {
            "description" : "Return the last 30 days of metrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/metrics"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/metrics/endpoints" : {
      "get" : {
        "tags" : [ "Metrics" ],
        "summary" : "Blockfrost endpoint usage metrics",
        "description" : "History of your Blockfrost usage metrics per endpoint in the past 30 days.\n",
        "responses" : {
          "200" : {
            "description" : "Return the last 30 days of metrics",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/metrics_endpoints"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication secret is missing or invalid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404" : {
            "description" : "Component not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "429" : {
            "description" : "Usage limit reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_429"
                }
              }
            }
          },
          "418" : {
            "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_418"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "block_content_array" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/block_content"
        }
      },
      "block_content" : {
        "required" : [ "block_vrf", "confirmations", "epoch", "epoch_slot", "fees", "hash", "height", "next_block", "output", "previous_block", "size", "slot", "slot_leader", "time", "tx_count" ],
        "type" : "object",
        "properties" : {
          "time" : {
            "type" : "integer",
            "description" : "Block creation time in UNIX time",
            "example" : 1641338934
          },
          "height" : {
            "type" : "integer",
            "description" : "Block number",
            "nullable" : true,
            "example" : 15243593
          },
          "hash" : {
            "type" : "string",
            "description" : "Hash of the block",
            "example" : "4ea1ba291e8eef538635a53e59fddba7810d1679631cc3aed7c8e6c4091a516a"
          },
          "slot" : {
            "type" : "integer",
            "description" : "Slot number",
            "nullable" : true,
            "example" : 412162133
          },
          "epoch" : {
            "type" : "integer",
            "description" : "Epoch number",
            "nullable" : true,
            "example" : 425
          },
          "epoch_slot" : {
            "type" : "integer",
            "description" : "Slot within the epoch",
            "nullable" : true,
            "example" : 12
          },
          "slot_leader" : {
            "type" : "string",
            "description" : "Bech32 ID of the slot leader or specific block description in case there is no slot leader",
            "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2qnikdy"
          },
          "size" : {
            "type" : "integer",
            "description" : "Block size in Bytes",
            "example" : 3
          },
          "tx_count" : {
            "type" : "integer",
            "description" : "Number of transactions in the block",
            "example" : 1
          },
          "output" : {
            "type" : "string",
            "description" : "Total output within the block in Lovelaces",
            "nullable" : true,
            "example" : "128314491794"
          },
          "fees" : {
            "type" : "string",
            "description" : "Total fees within the block in Lovelaces",
            "nullable" : true,
            "example" : "592661"
          },
          "block_vrf" : {
            "maxLength" : 65,
            "minLength" : 65,
            "type" : "string",
            "description" : "VRF key of the block",
            "nullable" : true,
            "example" : "vrf_vk1wf2k6lhujezqcfe00l6zetxpnmh9n6mwhpmhm0dvfh3fxgmdnrfqkms8ty"
          },
          "previous_block" : {
            "type" : "string",
            "description" : "Hash of the previous block",
            "nullable" : true,
            "example" : "43ebccb3ac72c7cebd0d9b755a4b08412c9f5dcb81b8a0ad1e3c197d29d47b05"
          },
          "next_block" : {
            "type" : "string",
            "description" : "Hash of the next block",
            "nullable" : true,
            "example" : "8367f026cf4b03e116ff8ee5daf149b55ba5a6ec6dec04803b8dc317721d15fa"
          },
          "confirmations" : {
            "type" : "integer",
            "description" : "Number of block confirmations",
            "example" : 4698
          }
        }
      },
      "block_content_txs" : {
        "type" : "array",
        "example" : [ "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b", "4eef6bb7755d8afbeac526b799f3e32a624691d166657e9d862aaeb66682c036", "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f", "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b" ],
        "items" : {
          "type" : "string",
          "description" : "Hash of the transaction"
        }
      },
      "genesis_content" : {
        "required" : [ "active_slots_coefficient", "epoch_length", "max_kes_evolutions", "max_lovelace_supply", "network_magic", "security_param", "slot_length", "slots_per_kes_period", "system_start", "update_quorum" ],
        "type" : "object",
        "properties" : {
          "active_slots_coefficient" : {
            "type" : "number",
            "description" : "The proportion of slots in which blocks should be issued",
            "example" : 0.05
          },
          "update_quorum" : {
            "type" : "integer",
            "description" : "Determines the quorum needed for votes on the protocol parameter updates",
            "example" : 5
          },
          "max_lovelace_supply" : {
            "type" : "string",
            "description" : "The total number of lovelace in the system",
            "example" : "45000000000000000"
          },
          "network_magic" : {
            "type" : "integer",
            "description" : "Network identifier",
            "example" : 764824073
          },
          "epoch_length" : {
            "type" : "integer",
            "description" : "Number of slots in an epoch",
            "example" : 432000
          },
          "system_start" : {
            "type" : "integer",
            "description" : "Time of slot 0 in UNIX time",
            "example" : 1506203091
          },
          "slots_per_kes_period" : {
            "type" : "integer",
            "description" : "Number of slots in an KES period",
            "example" : 129600
          },
          "slot_length" : {
            "type" : "integer",
            "description" : "Duration of one slot in seconds",
            "example" : 1
          },
          "max_kes_evolutions" : {
            "type" : "integer",
            "description" : "The maximum number of time a KES key can be evolved before a pool operator must create a new operational certificate",
            "example" : 62
          },
          "security_param" : {
            "type" : "integer",
            "description" : "Security parameter k",
            "example" : 2160
          }
        }
      },
      "epoch_content_array" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/epoch_content"
        }
      },
      "epoch_content" : {
        "required" : [ "active_stake", "block_count", "end_time", "epoch", "fees", "first_block_time", "last_block_time", "output", "start_time", "tx_count" ],
        "type" : "object",
        "properties" : {
          "epoch" : {
            "type" : "integer",
            "description" : "Epoch number",
            "example" : 225
          },
          "start_time" : {
            "type" : "integer",
            "description" : "Unix time of the start of the epoch",
            "example" : 1603403091
          },
          "end_time" : {
            "type" : "integer",
            "description" : "Unix time of the end of the epoch",
            "example" : 1603835086
          },
          "first_block_time" : {
            "type" : "integer",
            "description" : "Unix time of the first block of the epoch",
            "example" : 1603403092
          },
          "last_block_time" : {
            "type" : "integer",
            "description" : "Unix time of the last block of the epoch",
            "example" : 1603835084
          },
          "block_count" : {
            "type" : "integer",
            "description" : "Number of blocks within the epoch",
            "example" : 21298
          },
          "tx_count" : {
            "type" : "integer",
            "description" : "Number of transactions within the epoch",
            "example" : 17856
          },
          "output" : {
            "type" : "string",
            "description" : "Sum of all the transactions within the epoch in Lovelaces",
            "example" : "7849943934049314"
          },
          "fees" : {
            "type" : "string",
            "description" : "Sum of all the fees within the epoch in Lovelaces",
            "example" : "4203312194"
          },
          "active_stake" : {
            "type" : "string",
            "description" : "Sum of all the active stakes within the epoch in Lovelaces",
            "nullable" : true,
            "example" : "784953934049314"
          }
        }
      },
      "epoch_stake_content" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/epoch_stake_content_inner"
        }
      },
      "epoch_stake_pool_content" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/epoch_stake_pool_content_inner"
        }
      },
      "epoch_block_content" : {
        "type" : "array",
        "example" : [ "d0fa315687e99ccdc96b14cc2ea74a767405d64427b648c470731a9b69e4606e", "38bc6efb92a830a0ed22a64f979d120d26483fd3c811f6622a8c62175f530878", "f3258fcd8b975c061b4fcdcfcbb438807134d6961ec278c200151274893b6b7d" ],
        "items" : {
          "type" : "string",
          "description" : "Hash of the block"
        }
      },
      "epoch_param_content" : {
        "required" : [ "a0", "decentralisation_param", "e_max", "extra_entropy", "key_deposit", "max_block_header_size", "max_block_size", "max_tx_size", "min_fee_a", "min_fee_b", "min_pool_cost", "min_utxo", "n_opt", "nonce", "pool_deposit", "protocol_major_ver", "protocol_minor_ver", "rho", "tau" ],
        "type" : "object",
        "properties" : {
          "min_fee_a" : {
            "type" : "integer",
            "description" : "The linear factor for the minimum fee calculation for given epoch",
            "example" : 44
          },
          "min_fee_b" : {
            "type" : "integer",
            "description" : "The constant factor for the minimum fee calculation",
            "example" : 155381
          },
          "max_block_size" : {
            "type" : "integer",
            "description" : "Maximum block body size in Bytes",
            "example" : 65536
          },
          "max_tx_size" : {
            "type" : "integer",
            "description" : "Maximum transaction size",
            "example" : 16384
          },
          "max_block_header_size" : {
            "type" : "integer",
            "description" : "Maximum block header size",
            "example" : 1100
          },
          "key_deposit" : {
            "type" : "string",
            "description" : "The amount of a key registration deposit in Lovelaces",
            "example" : "2000000"
          },
          "pool_deposit" : {
            "type" : "string",
            "description" : "The amount of a pool registration deposit in Lovelaces",
            "example" : "500000000"
          },
          "e_max" : {
            "type" : "integer",
            "description" : "Epoch bound on pool retirement",
            "example" : 18
          },
          "n_opt" : {
            "type" : "integer",
            "description" : "Desired number of pools",
            "example" : 150
          },
          "a0" : {
            "type" : "number",
            "description" : "Pool pledge influence",
            "example" : 0.3
          },
          "rho" : {
            "type" : "number",
            "description" : "Monetary expansion",
            "example" : 0.003
          },
          "tau" : {
            "type" : "number",
            "description" : "Treasury expansion",
            "example" : 0.2
          },
          "decentralisation_param" : {
            "type" : "number",
            "description" : "Percentage of blocks produced by federated nodes",
            "example" : 0.5
          },
          "extra_entropy" : {
            "type" : "object",
            "description" : "Seed for extra entropy",
            "nullable" : true
          },
          "protocol_major_ver" : {
            "type" : "integer",
            "description" : "Accepted protocol major version",
            "example" : 2
          },
          "protocol_minor_ver" : {
            "type" : "integer",
            "description" : "Accepted protocol minor version",
            "example" : 0
          },
          "min_utxo" : {
            "type" : "string",
            "description" : "Minimum UTXO value",
            "example" : "1000000"
          },
          "min_pool_cost" : {
            "type" : "string",
            "description" : "Minimum stake cost forced on the pool",
            "example" : "340000000"
          },
          "nonce" : {
            "type" : "string",
            "description" : "Epoch number only used once",
            "example" : "1a3be38bcbb7911969283716ad7aa550250226b76a61fc51cc9a9a35d9276d81"
          }
        }
      },
      "tx_content" : {
        "required" : [ "block", "delegation_count", "deposit", "fees", "index", "invalid_before", "invalid_hereafter", "output_amount", "pool_retire_count", "pool_update_count", "size", "stake_cert_count", "utxo_count", "withdrawal_count" ],
        "type" : "object",
        "properties" : {
          "block" : {
            "type" : "string",
            "description" : "Block hash",
            "example" : "356b7d7dbb696ccd12775c016941057a9dc70898d87a63fc752271bb46856940"
          },
          "index" : {
            "type" : "integer",
            "description" : "Transaction index within the block",
            "example" : 1
          },
          "output_amount" : {
            "type" : "array",
            "example" : [ {
              "unit" : "lovelace",
              "quantity" : "42000000"
            }, {
              "unit" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
              "quantity" : "12"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/tx_content_output_amount"
            }
          },
          "fees" : {
            "type" : "string",
            "description" : "Fees of the transaction in Lovelaces",
            "example" : "182485"
          },
          "deposit" : {
            "type" : "string",
            "description" : "Deposit within the transaction in Lovelaces",
            "example" : "0"
          },
          "size" : {
            "type" : "integer",
            "description" : "Size of the transaction in Bytes",
            "example" : 433
          },
          "invalid_before" : {
            "type" : "string",
            "description" : "Left (included) endpoint of the timelock validity intervals",
            "nullable" : true
          },
          "invalid_hereafter" : {
            "type" : "string",
            "description" : "Right (excluded) endpoint of the timelock validity intervals",
            "nullable" : true,
            "example" : "13885913"
          },
          "utxo_count" : {
            "type" : "integer",
            "description" : "Count of UTXOs within the transaction",
            "example" : 4
          },
          "withdrawal_count" : {
            "type" : "integer",
            "description" : "Count of the withdrawal within the transaction",
            "example" : 0
          },
          "delegation_count" : {
            "type" : "integer",
            "description" : "Count of the delegations within the transaction",
            "example" : 0
          },
          "stake_cert_count" : {
            "type" : "integer",
            "description" : "Count of the stake keys (de)registrations and delegations within the transaction",
            "example" : 0
          },
          "pool_update_count" : {
            "type" : "integer",
            "description" : "Count of the stake pool registrations and updates within the transaction",
            "example" : 0
          },
          "pool_retire_count" : {
            "type" : "integer",
            "description" : "Count of the stake pool retirements within the transaction",
            "example" : 0
          }
        }
      },
      "tx_content_utxo" : {
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/tx_content_utxo_inputs"
            }
          },
          "outputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/tx_content_utxo_outputs"
            }
          }
        }
      },
      "tx_content_stake_addr" : {
        "required" : [ "address", "registration" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Delegation stake address",
            "example" : "stake1u9t3a0tcwune5xrnfjg4q7cpvjlgx9lcv0cuqf5mhfjwrvcwrulda"
          },
          "registration" : {
            "type" : "boolean",
            "description" : "Registration boolean, false if deregistration",
            "example" : true
          }
        }
      },
      "tx_content_delegations" : {
        "required" : [ "active_epoch", "address", "index", "pool_id" ],
        "type" : "object",
        "properties" : {
          "index" : {
            "type" : "integer",
            "description" : "Index of the certificate within the transaction",
            "example" : 0
          },
          "address" : {
            "type" : "string",
            "description" : "Bech32 delegation stake address",
            "example" : "stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc"
          },
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 ID of delegated stake pool",
            "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          "active_epoch" : {
            "type" : "integer",
            "description" : "Epoch in which the delegation becomes active",
            "example" : 210
          }
        }
      },
      "tx_content_withdrawals" : {
        "required" : [ "address", "amount" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Bech32 withdrawal address",
            "example" : "stake1u9r76ypf5fskppa0cmttas05cgcswrttn6jrq4yd7jpdnvc7gt0yc"
          },
          "amount" : {
            "type" : "string",
            "description" : "Withdrawal amount in Lovelaces",
            "example" : "431833601"
          }
        }
      },
      "tx_content_pool_certs" : {
        "required" : [ "active_epoch", "fixed_cost", "margin_cost", "metadata", "owners", "pledge", "pool_id", "relays", "reward_account", "vrf_key" ],
        "type" : "object",
        "properties" : {
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 encoded pool ID",
            "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          "vrf_key" : {
            "type" : "string",
            "description" : "VRF key hash",
            "example" : "0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233"
          },
          "pledge" : {
            "type" : "string",
            "description" : "Stake pool certificate pledge in Lovelaces",
            "example" : "5000000000"
          },
          "margin_cost" : {
            "type" : "number",
            "description" : "Margin tax cost of the stake pool",
            "example" : 0.05
          },
          "fixed_cost" : {
            "type" : "string",
            "description" : "Fixed tax cost of the stake pool in Lovelaces",
            "example" : "340000000"
          },
          "reward_account" : {
            "type" : "string",
            "description" : "Bech32 reward account of the stake pool",
            "example" : "stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f"
          },
          "owners" : {
            "type" : "array",
            "example" : [ "stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v" ],
            "items" : {
              "type" : "string",
              "description" : "Bech32 accounts of the pool owners"
            }
          },
          "metadata" : {
            "$ref" : "#/components/schemas/tx_content_pool_certs_metadata"
          },
          "relays" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/tx_content_pool_certs_relays"
            }
          },
          "active_epoch" : {
            "type" : "integer",
            "description" : "Epoch that the delegation becomes active",
            "example" : 210
          }
        }
      },
      "tx_content_pool_retires" : {
        "required" : [ "pool_id", "retiring_epoch" ],
        "type" : "object",
        "properties" : {
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 stake pool ID",
            "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          "retiring_epoch" : {
            "type" : "integer",
            "description" : "Retiring epoch",
            "example" : 216
          }
        }
      },
      "tx_content_metadata" : {
        "type" : "array",
        "example" : [ {
          "label" : "1967",
          "json_metadata" : {
            "metadata" : "https://nut.link/metadata.json",
            "hash" : "6bf124f217d0e5a0a8adb1dbd8540e1334280d49ab861127868339f43b3948af"
          }
        }, {
          "label" : "1968",
          "json_metadata" : {
            "ADAUSD" : [ {
              "value" : "0.10409800535729975",
              "source" : "ergoOracles"
            } ]
          }
        } ],
        "items" : {
          "$ref" : "#/components/schemas/tx_content_metadata_inner"
        }
      },
      "tx_content_metadata_cbor" : {
        "type" : "array",
        "example" : [ {
          "label" : "1968",
          "cbor_metadata" : "\\xa100a16b436f6d62696e6174696f6e8601010101010c"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/tx_content_metadata_cbor_inner"
        }
      },
      "account_content" : {
        "required" : [ "active", "active_epoch", "controlled_amount", "pool_id", "reserves_sum", "rewards_sum", "treasury_sum", "withdrawable_amount", "withdrawals_sum" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "Registration state of an account",
            "example" : true
          },
          "active_epoch" : {
            "type" : "integer",
            "description" : "Epoch of the most recent action - registration or deregistration",
            "example" : 412
          },
          "controlled_amount" : {
            "type" : "string",
            "description" : "Balance of the account in Lovelaces",
            "example" : "619154618165"
          },
          "rewards_sum" : {
            "type" : "string",
            "description" : "Sum of all rewards for the account in the Lovelaces",
            "example" : "319154618165"
          },
          "withdrawals_sum" : {
            "type" : "string",
            "description" : "Sum of all the withdrawals for the account in Lovelaces",
            "example" : "12125369253"
          },
          "reserves_sum" : {
            "type" : "string",
            "description" : "Sum of all  funds from reserves for the account in the Lovelaces",
            "example" : "319154618165"
          },
          "treasury_sum" : {
            "type" : "string",
            "description" : "Sum of all funds from treasury for the account in the Lovelaces",
            "example" : "12000000"
          },
          "withdrawable_amount" : {
            "type" : "string",
            "description" : "Sum of available rewards that haven't been withdrawn yet for the account in the Lovelaces",
            "example" : "319154618165"
          },
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 pool ID that owns the account",
            "nullable" : true,
            "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          }
        }
      },
      "account_addresses_content" : {
        "type" : "array",
        "example" : [ {
          "address" : "addr1qx2kd28nq8ac5prwg32hhvudlwggpgfp8utlyqxu6wqgz62f79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sy0f4qd"
        }, {
          "address" : "addr1qys3czp8s9thc6u2fqed9yq3h24nyw28uk0m6mkgn9dkckjf79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9suth4w4"
        }, {
          "address" : "addr1q8j55h253zcvl326sk5qdt2n8z7eghzspe0ekxgncr796s2f79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sjmd35m"
        }, {
          "address" : "addr1q8f7gxrprank3drhx8k5grlux7ene0nlwun8y9thu8mc3yjf79qsdmm5dsknt9ecr5w468r9ey0fxwkdrwh08ly3tu9sls6vnt"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/account_addresses_content_inner"
        }
      },
      "account_reward_content" : {
        "type" : "array",
        "example" : [ {
          "epoch" : 215,
          "amount" : "12695385",
          "pool_id" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "epoch" : 216,
          "amount" : "3586329",
          "pool_id" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "epoch" : 217,
          "amount" : "0",
          "pool_id" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "epoch" : 218,
          "amount" : "1395265",
          "pool_id" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/account_reward_content_inner"
        }
      },
      "account_delegation_content" : {
        "type" : "array",
        "example" : [ {
          "active_epoch" : 210,
          "tx_hash" : "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
          "amount" : "12695385",
          "pool_id" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "active_epoch" : 242,
          "tx_hash" : "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
          "amount" : "12691385",
          "pool_id" : "pool1kchver88u3kygsak8wgll7htr8uxn5v35lfrsyy842nkscrzyvj"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/account_delegation_content_inner"
        }
      },
      "account_history_content" : {
        "type" : "array",
        "example" : [ {
          "active_epoch" : 210,
          "amount" : "12695385",
          "pool_id" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        }, {
          "active_epoch" : 211,
          "amount" : "22695385",
          "pool_id" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/account_history_content_inner"
        }
      },
      "account_registration_content" : {
        "type" : "array",
        "example" : [ {
          "tx_hash" : "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
          "action" : "registered"
        }, {
          "tx_hash" : "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
          "action" : "deregistered"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/account_registration_content_inner"
        }
      },
      "address_content" : {
        "required" : [ "amount", "stake_address", "type" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "array",
            "example" : [ {
              "unit" : "lovelace",
              "quantity" : "42000000"
            }, {
              "unit" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
              "quantity" : "12"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/tx_content_output_amount"
            }
          },
          "stake_address" : {
            "type" : "string",
            "description" : "Stake address that controls the key",
            "nullable" : true,
            "example" : "stake1ux3g2c9dx2nhhehyrezyxpkstartcqmu9hk63qgfkccw5rqttygt7"
          },
          "type" : {
            "type" : "string",
            "description" : "Address era",
            "example" : "shelley",
            "enum" : [ "byron", "shelley" ]
          }
        }
      },
      "address_content_total" : {
        "required" : [ "received_sum", "sent_sum", "tx_count" ],
        "type" : "object",
        "properties" : {
          "received_sum" : {
            "type" : "array",
            "example" : [ {
              "unit" : "lovelace",
              "quantity" : "42000000"
            }, {
              "unit" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
              "quantity" : "12"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/tx_content_output_amount"
            }
          },
          "sent_sum" : {
            "type" : "array",
            "example" : [ {
              "unit" : "lovelace",
              "quantity" : "42000000"
            }, {
              "unit" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
              "quantity" : "12"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/tx_content_output_amount"
            }
          },
          "tx_count" : {
            "type" : "integer",
            "description" : "Count of all transactions on the address",
            "example" : 12
          }
        }
      },
      "address_utxo_content" : {
        "type" : "array",
        "example" : [ {
          "tx_hash" : "39a7a284c2a0948189dc45dec670211cd4d72f7b66c5726c08d9b3df11e44d58",
          "output_index" : 0,
          "amount" : [ {
            "unit" : "lovelace",
            "quantity" : "42000000"
          } ],
          "block" : "7eb8e27d18686c7db9a18f8bbcfe34e3fed6e047afaa2d969904d15e934847e6"
        }, {
          "tx_hash" : "4c4e67bafa15e742c13c592b65c8f74c769cd7d9af04c848099672d1ba391b49",
          "output_index" : 0,
          "amount" : [ {
            "unit" : "lovelace",
            "quantity" : "729235000"
          } ],
          "block" : "953f1b80eb7c11a7ffcd67cbd4fde66e824a451aca5a4065725e5174b81685b7"
        }, {
          "tx_hash" : "768c63e27a1c816a83dc7b07e78af673b2400de8849ea7e7b734ae1333d100d2",
          "output_index" : 1,
          "amount" : [ {
            "unit" : "lovelace",
            "quantity" : "42000000"
          }, {
            "unit" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
            "quantity" : "12"
          } ],
          "block" : "5c571f83fe6c784d3fbc223792627ccf0eea96773100f9aedecf8b1eda4544d7"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/address_utxo_content_inner"
        }
      },
      "address_txs_content" : {
        "type" : "array",
        "example" : [ "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531", "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0" ],
        "items" : {
          "type" : "string",
          "description" : "Hash of the transaction containing the (de)registration certificate"
        }
      },
      "tx_metadata_labels" : {
        "type" : "array",
        "example" : [ {
          "label" : "1990",
          "cip10" : null,
          "count" : "1"
        }, {
          "label" : "1967",
          "cip10" : "nut.link metadata oracles registry",
          "count" : "3"
        }, {
          "label" : "1968",
          "cip10" : "nut.link metadata oracles data points",
          "count" : "16321"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/tx_metadata_labels_inner"
        }
      },
      "tx_metadata_label_json" : {
        "type" : "array",
        "example" : [ {
          "tx_hash" : "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
          "json_metadata" : {
            "ADAUSD" : [ {
              "value" : "0.10409800535729975",
              "source" : "ergoOracles"
            } ]
          }
        }, {
          "tx_hash" : "e865f2cc01ca7381cf98dcdc4de07a5e8674b8ea16e6a18e3ed60c186fde2b9c",
          "json_metadata" : {
            "ADAUSD" : [ {
              "value" : "0.15409850555139935",
              "source" : "ergoOracles"
            } ]
          }
        }, {
          "tx_hash" : "4237501da3cfdd53ade91e8911e764bd0699d88fd43b12f44a1f459b89bc91be",
          "json_metadata" : null
        } ],
        "items" : {
          "$ref" : "#/components/schemas/tx_metadata_label_json_inner"
        }
      },
      "tx_metadata_label_cbor" : {
        "type" : "array",
        "example" : [ {
          "tx_hash" : "257d75c8ddb0434e9b63e29ebb6241add2b835a307aa33aedba2effe09ed4ec8",
          "cbor_metadata" : null
        }, {
          "tx_hash" : "e865f2cc01ca7381cf98dcdc4de07a5e8674b8ea16e6a18e3ed60c186fde2b9c",
          "cbor_metadata" : null
        }, {
          "tx_hash" : "4237501da3cfdd53ade91e8911e764bd0699d88fd43b12f44a1f459b89bc91be",
          "cbor_metadata" : "\\xa100a16b436f6d62696e6174696f6e8601010101010c"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/tx_metadata_label_cbor_inner"
        }
      },
      "pool_list" : {
        "type" : "array",
        "example" : [ "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy", "pool1hn7hlwrschqykupwwrtdfkvt2u4uaxvsgxyh6z63703p2knj288", "pool1ztjyjfsh432eqetadf82uwuxklh28xc85zcphpwq6mmezavzad2" ],
        "items" : {
          "type" : "string",
          "description" : "Bech32 encoded pool ID"
        }
      },
      "pool_list_retire" : {
        "type" : "array",
        "example" : [ {
          "pool_id" : "pool19u64770wqp6s95gkajc8udheske5e6ljmpq33awxk326zjaza0q",
          "epoch" : 225
        }, {
          "pool_id" : "pool1dvla4zq98hpvacv20snndupjrqhuc79zl6gjap565nku6et5zdx",
          "epoch" : 215
        }, {
          "pool_id" : "pool1wvccajt4eugjtf3k0ja3exjqdj7t8egsujwhcw4tzj4rzsxzw5w",
          "epoch" : 231
        } ],
        "items" : {
          "$ref" : "#/components/schemas/pool_list_retire_inner"
        }
      },
      "pool_history" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/pool_history_inner"
        }
      },
      "pool" : {
        "required" : [ "active_size", "active_stake", "blocks_minted", "declared_pledge", "fixed_cost", "live_delegators", "live_pledge", "live_saturation", "live_size", "live_stake", "margin_cost", "owners", "registration", "retirement", "reward_account", "vrf_key" ],
        "type" : "object",
        "properties" : {
          "vrf_key" : {
            "type" : "string",
            "description" : "VRF key hash",
            "example" : "0b5245f9934ec2151116fb8ec00f35fd00e0aa3b075c4ed12cce440f999d8233"
          },
          "blocks_minted" : {
            "type" : "integer",
            "description" : "Total minted blocks",
            "example" : 69
          },
          "live_stake" : {
            "type" : "string",
            "example" : "6900000000"
          },
          "live_size" : {
            "type" : "number",
            "example" : 0.42
          },
          "live_saturation" : {
            "type" : "number",
            "example" : 0.93
          },
          "live_delegators" : {
            "type" : "number",
            "example" : 127
          },
          "active_stake" : {
            "type" : "string",
            "example" : "4200000000"
          },
          "active_size" : {
            "type" : "number",
            "example" : 0.43
          },
          "declared_pledge" : {
            "type" : "string",
            "description" : "Stake pool certificate pledge",
            "example" : "5000000000"
          },
          "live_pledge" : {
            "type" : "string",
            "description" : "Stake pool current pledge",
            "example" : "5000000001"
          },
          "margin_cost" : {
            "type" : "number",
            "description" : "Margin tax cost of the stake pool",
            "example" : 0.05
          },
          "fixed_cost" : {
            "type" : "string",
            "description" : "Fixed tax cost of the stake pool",
            "example" : "340000000"
          },
          "reward_account" : {
            "type" : "string",
            "description" : "Bech32 reward account of the stake pool",
            "example" : "stake1uxkptsa4lkr55jleztw43t37vgdn88l6ghclfwuxld2eykgpgvg3f"
          },
          "owners" : {
            "type" : "array",
            "example" : [ "stake1u98nnlkvkk23vtvf9273uq7cph5ww6u2yq2389psuqet90sv4xv9v" ],
            "items" : {
              "type" : "string",
              "description" : "Bech32 accounts of the pool owners"
            }
          },
          "registration" : {
            "type" : "array",
            "example" : [ "9f83e5484f543e05b52e99988272a31da373f3aab4c064c76db96643a355d9dc", "7ce3b8c433bf401a190d58c8c483d8e3564dfd29ae8633c8b1b3e6c814403e95", "3e6e1200ce92977c3fe5996bd4d7d7e192bcb7e231bc762f9f240c76766535b9" ],
            "items" : {
              "type" : "string",
              "nullable" : true
            }
          },
          "retirement" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "nullable" : true,
              "example" : "252f622976d39e646815db75a77289cf16df4ad2b287dd8e3a889ce14c13d1a8"
            }
          }
        }
      },
      "pool_metadata" : {
        "required" : [ "description", "hash", "homepage", "name", "ticker", "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "URL to the stake pool metadata",
            "nullable" : true,
            "example" : "https://stakenuts.com/mainnet.json"
          },
          "hash" : {
            "type" : "string",
            "description" : "Hash of the metadata file",
            "nullable" : true,
            "example" : "47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c"
          },
          "ticker" : {
            "type" : "string",
            "description" : "Ticker of the stake pool",
            "nullable" : true,
            "example" : "NUTS"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the stake pool",
            "nullable" : true,
            "example" : "Stake Nuts"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the stake pool",
            "nullable" : true,
            "example" : "The best pool ever"
          },
          "homepage" : {
            "type" : "string",
            "description" : "Home page of the stake pool",
            "nullable" : true,
            "example" : "https://stakentus.com/"
          }
        }
      },
      "pool_relays" : {
        "required" : [ "dns", "dns_srv", "ipv4", "ipv6", "port" ],
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/pool_relays_inner"
        }
      },
      "pool_delegations" : {
        "type" : "array",
        "example" : [ {
          "tx_hash" : "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
          "cert_index" : 0
        }, {
          "tx_hash" : "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
          "cert_index" : 0
        }, {
          "tx_hash" : "e14a75b0eb2625de7055f1f580d70426311b78e0d36dd695a6bdc96c7b3d80e0",
          "cert_index" : 1
        } ],
        "items" : {
          "$ref" : "#/components/schemas/pool_delegations_inner"
        }
      },
      "pool_blocks" : {
        "type" : "array",
        "example" : [ "d8982ca42cfe76b747cc681d35d671050a9e41e9cfe26573eb214e94fe6ff21d", "026436c539e2ce84c7f77ffe669f4e4bbbb3b9c53512e5857dcba8bb0b4e9a8c", "bcc8487f419b8c668a18ea2120822a05df6dfe1de1f0fac3feba88cf760f303c", "86bf7b4a274e0f8ec9816171667c1b4a0cfc661dc21563f271acea9482b62df7" ],
        "items" : {
          "type" : "string",
          "description" : "Block hashes"
        }
      },
      "pool_updates" : {
        "type" : "array",
        "example" : [ {
          "tx_hash" : "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
          "cert_index" : 0,
          "action" : "registered"
        }, {
          "tx_hash" : "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
          "cert_index" : 0,
          "action" : "deregistered"
        }, {
          "tx_hash" : "e14a75b0eb2625de7055f1f580d70426311b78e0d36dd695a6bdc96c7b3d80e0",
          "cert_index" : 1,
          "action" : "registered"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/pool_updates_inner"
        }
      },
      "pool_delegators" : {
        "type" : "array",
        "example" : [ {
          "address" : "stake1ux4vspfvwuus9uwyp5p3f0ky7a30jq5j80jxse0fr7pa56sgn8kha",
          "live_stake" : "1137959159981411"
        }, {
          "address" : "stake1uylayej7esmarzd4mk4aru37zh9yz0luj3g9fsvgpfaxulq564r5u",
          "live_stake" : "16958865648"
        }, {
          "address" : "stake1u8lr2pnrgf8f7vrs9lt79hc3sxm8s2w4rwvgpncks3axx6q93d4ck",
          "live_stake" : "18605647"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/pool_delegators_inner"
        }
      },
      "assets" : {
        "type" : "array",
        "example" : [ {
          "asset" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
          "quantity" : "1"
        }, {
          "asset" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e75d",
          "quantity" : "100000"
        }, {
          "asset" : "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad",
          "quantity" : "18605647"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/assets_inner"
        }
      },
      "asset" : {
        "required" : [ "asset_name", "initial_mint_tx_hash", "metadata", "policy_id", "quantity" ],
        "type" : "object",
        "properties" : {
          "policy_id" : {
            "type" : "string",
            "description" : "Policy ID of the asset",
            "example" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a7"
          },
          "asset_name" : {
            "type" : "string",
            "description" : "Hex-encoded asset name of the asset",
            "nullable" : true,
            "example" : "6e7574636f696e"
          },
          "fingerprint" : {
            "type" : "string",
            "description" : "CIP14 based user-facing fingerprint",
            "example" : "asset1pkpwyknlvul7az0xx8czhl60pyel45rpje4z8w"
          },
          "quantity" : {
            "type" : "string",
            "description" : "Current asset quantity",
            "example" : "12000"
          },
          "initial_mint_tx_hash" : {
            "type" : "string",
            "description" : "ID of the initial minting transaction",
            "example" : "6804edf9712d2b619edb6ac86861fe93a730693183a262b165fcc1ba1bc99cad"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/asset_metadata"
          }
        }
      },
      "asset_history" : {
        "type" : "array",
        "example" : [ {
          "tx_hash" : "2dd15e0ef6e6a17841cb9541c27724072ce4d4b79b91e58432fbaa32d9572531",
          "amount" : "10",
          "action" : "minted"
        }, {
          "tx_hash" : "9c190bc1ac88b2ab0c05a82d7de8b71b67a9316377e865748a89d4426c0d3005",
          "amount" : "5",
          "action" : "burned"
        }, {
          "tx_hash" : "1a0570af966fb355a7160e4f82d5a80b8681b7955f5d44bec0dde628516157f0",
          "amount" : "5",
          "action" : "burned"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/asset_history_inner"
        }
      },
      "asset_txs" : {
        "type" : "array",
        "example" : [ "8788591983aa73981fc92d6cddbbe643959f5a784e84b8bee0db15823f575a5b", "52e748c4dec58b687b90b0b40d383b9fe1f24c1a833b7395cdf07dd67859f46f", "e8073fd5318ff43eca18a852527166aa8008bee9ee9e891f585612b7e4ba700b" ],
        "items" : {
          "type" : "string",
          "description" : "Hash of the transaction"
        }
      },
      "asset_addresses" : {
        "type" : "array",
        "example" : [ {
          "address" : "addr1qxqs59lphg8g6qndelq8xwqn60ag3aeyfcp33c2kdp46a09re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qsgy6pz",
          "quantity" : "1"
        }, {
          "address" : "addr1qyhr4exrgavdcn3qhfcc9f939fzsch2re5ry9cwvcdyh4x4re5df3pzwwmyq946axfcejy5n4x0y99wqpgtp2gd0k09qdpvhza",
          "quantity" : "100000"
        }, {
          "address" : "addr1q8zup8m9ue3p98kxlxl9q8rnyan8hw3ul282tsl9s326dfj088lvedv4zckcj24arcpasr0gua4c5gq4zw2rpcpjk2lq8cmd9l",
          "quantity" : "18605647"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/asset_addresses_inner"
        }
      },
      "asset_policy" : {
        "type" : "array",
        "example" : [ {
          "asset" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
          "quantity" : "1"
        }, {
          "asset" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a766e",
          "quantity" : "100000"
        }, {
          "asset" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb574636f696e",
          "quantity" : "18605647"
        } ],
        "items" : {
          "$ref" : "#/components/schemas/asset_policy_inner"
        }
      },
      "metrics" : {
        "type" : "array",
        "example" : [ [ {
          "date" : 1612543884,
          "calls" : 42
        }, {
          "date" : 1614523884,
          "calls" : 6942
        } ] ],
        "items" : {
          "$ref" : "#/components/schemas/metrics_inner"
        }
      },
      "metrics_endpoints" : {
        "type" : "array",
        "example" : [ [ {
          "date" : 1612543814,
          "calls" : 182,
          "endpoint" : "block"
        }, {
          "date" : 1612543814,
          "calls" : 42,
          "endpoint" : "epoch"
        }, {
          "date" : 1612543812,
          "calls" : 775,
          "endpoint" : "block"
        }, {
          "date" : 1612523884,
          "calls" : 4,
          "endpoint" : "epoch"
        }, {
          "date" : 1612553884,
          "calls" : 89794,
          "endpoint" : "block"
        } ] ],
        "items" : {
          "$ref" : "#/components/schemas/metrics_endpoints_inner"
        }
      },
      "empty_object" : {
        "type" : "object"
      },
      "inline_response_200" : {
        "required" : [ "url", "version" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "example" : "https://blockfrost.io/"
          },
          "version" : {
            "type" : "string",
            "example" : "0.1.0"
          }
        }
      },
      "inline_response_400" : {
        "type" : "object",
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "example" : 400
          },
          "error" : {
            "type" : "string",
            "example" : "Bad Request"
          },
          "message" : {
            "type" : "string",
            "example" : "Backend did not understand your request."
          }
        }
      },
      "inline_response_403" : {
        "type" : "object",
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "example" : 403
          },
          "error" : {
            "type" : "string",
            "example" : "Forbidden"
          },
          "message" : {
            "type" : "string",
            "example" : "Invalid project token."
          }
        }
      },
      "inline_response_429" : {
        "type" : "object",
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "example" : 429
          },
          "error" : {
            "type" : "string",
            "example" : "Project Over Limit"
          },
          "message" : {
            "type" : "string",
            "example" : "Usage is over limit."
          }
        }
      },
      "inline_response_418" : {
        "type" : "object",
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "example" : 418
          },
          "error" : {
            "type" : "string",
            "example" : "Requested Banned"
          },
          "message" : {
            "type" : "string",
            "example" : "IP has been auto-banned for flooding."
          }
        }
      },
      "inline_response_500" : {
        "type" : "object",
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "example" : 505
          },
          "error" : {
            "type" : "string",
            "example" : "Internal Server Error"
          },
          "message" : {
            "type" : "string",
            "example" : "An unexpected response was received from the backend."
          }
        }
      },
      "inline_response_200_1" : {
        "type" : "object",
        "properties" : {
          "is_healthy" : {
            "type" : "boolean",
            "example" : true
          }
        }
      },
      "inline_response_200_2" : {
        "type" : "object",
        "properties" : {
          "server_time" : {
            "type" : "integer",
            "example" : 1603400958947
          }
        }
      },
      "inline_response_404" : {
        "type" : "object",
        "properties" : {
          "status_code" : {
            "type" : "integer",
            "example" : 404
          },
          "error" : {
            "type" : "string",
            "example" : "Not Found"
          },
          "message" : {
            "type" : "string",
            "example" : "The requested component has not been found."
          }
        }
      },
      "inline_response_200_3" : {
        "anyOf" : [ {
          "$ref" : "#/components/schemas/pool_metadata"
        }, {
          "$ref" : "#/components/schemas/empty_object"
        } ]
      },
      "inline_response_200_4" : {
        "required" : [ "ipfs_hash", "name", "size" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the file",
            "example" : "README.md"
          },
          "ipfs_hash" : {
            "type" : "string",
            "description" : "IPFS hash of the file",
            "example" : "QmZbHqiCxKEVX7QfijzJTkZiSi3WEVTcvANgNAWzDYgZDr"
          },
          "size" : {
            "type" : "integer",
            "description" : "Size of the file",
            "example" : 125297
          }
        }
      },
      "inline_response_200_5" : {
        "type" : "object",
        "properties" : {
          "ipfs_hash" : {
            "type" : "string",
            "description" : "IPFS hash of the pinned object",
            "example" : "QmPojRfAXYAXV92Dof7gtSgaVuxEk64xx9CKvprqu9VwA8"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the pin action",
            "example" : "queued",
            "enum" : [ "queued|pinned|unpinned|failed|gc" ]
          }
        }
      },
      "inline_response_200_6" : {
        "type" : "object",
        "properties" : {
          "time_created" : {
            "type" : "integer",
            "description" : "Creation time of the IPFS object on our backends",
            "example" : 1615551024
          },
          "time_pinned" : {
            "type" : "integer",
            "description" : "Pin time of the IPFS object on our backends",
            "example" : 1615551024
          },
          "ipfs_hash" : {
            "type" : "string",
            "description" : "IPFS hash of the pinned object",
            "example" : "QmdVMnULrY95mth2XkwjxDtMHvzuzmvUPTotKE1tgqKbCx"
          },
          "size" : {
            "type" : "string",
            "description" : "Size of the object in Bytes",
            "example" : "1615551024"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the pinned object, which is `queued` when we are retriving object. If this\nis successful the state is changed to `pinned` or `failed` if not. The state `gc` means the\npinned item has been garbage collected due to account being over storage quota or after it has\nbeen moved to `unpinned` state by removing the object pin.\n",
            "example" : "pinned",
            "enum" : [ "queued|pinned|unpinned|failed|gc" ]
          }
        }
      },
      "inline_response_200_7" : {
        "type" : "object",
        "properties" : {
          "time_created" : {
            "type" : "integer",
            "description" : "Time of the creation of the IPFS object on our backends",
            "example" : 1615551024
          },
          "time_pinned" : {
            "type" : "integer",
            "description" : "Time of the pin of the IPFS object on our backends",
            "example" : 1615551024
          },
          "ipfs_hash" : {
            "type" : "string",
            "description" : "IPFS hash of the pinned object",
            "example" : "QmdVMnULrY95mth2XkwjxDtMHvzuzmvUPTotKE1tgqKbCx"
          },
          "size" : {
            "type" : "string",
            "description" : "Size of the object in Bytes",
            "example" : "1615551024"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the pinned object. We define 5 states: `queued`, `pinned`, `unpinned`, `failed`, `gc`.\nWhen the object is pending retrieval (i.e. after `/ipfs/pin/add/{IPFS_path}`), the state is `queued`.\nIf the object is already successfully retrieved, state is changed to `pinned` or `failed` otherwise.\nWhen object is unpinned (i.e. after `/ipfs/pin/remove/{IPFS_path}`) it is marked for garbage collection.\nState `gc` means that a previously `unpinned` item has been garbage collected due to account being over storage quota.\n",
            "example" : "pinned",
            "enum" : [ "queued|pinned|unpinned|failed|gc" ]
          }
        }
      },
      "inline_response_200_8" : {
        "type" : "object",
        "properties" : {
          "ipfs_hash" : {
            "type" : "string",
            "description" : "IPFS hash of the pinned object",
            "example" : "QmPojRfAXYAXV92Dof7gtSgaVuxEk64xx9CKvprqu9VwA8"
          },
          "state" : {
            "type" : "string",
            "description" : "State of the pin action",
            "example" : "unpinned",
            "enum" : [ "queued|pinned|unpinned|failed|gc" ]
          }
        }
      },
      "epoch_stake_content_inner" : {
        "required" : [ "amount", "pool_id", "stake_address" ],
        "properties" : {
          "stake_address" : {
            "type" : "string",
            "description" : "Stake address",
            "example" : "stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk"
          },
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 prefix of the pool delegated to",
            "example" : "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
          },
          "amount" : {
            "type" : "string",
            "description" : "Amount of delegated stake in Lovelaces",
            "example" : "4440295078"
          }
        }
      },
      "epoch_stake_pool_content_inner" : {
        "required" : [ "amount", "stake_address" ],
        "properties" : {
          "stake_address" : {
            "type" : "string",
            "description" : "Stake address",
            "example" : "stake1u9l5q5jwgelgagzyt6nuaasefgmn8pd25c8e9qpeprq0tdcp0e3uk"
          },
          "amount" : {
            "type" : "string",
            "description" : "Amount of delegated stake in Lovelaces",
            "example" : "4440295078"
          }
        }
      },
      "tx_content_output_amount" : {
        "type" : "object",
        "properties" : {
          "unit" : {
            "type" : "string",
            "description" : "The unit of the value",
            "format" : "Lovelace or concatenation of asset policy_id and hex-encoded asset_name"
          },
          "quantity" : {
            "type" : "string",
            "description" : "The quantity of the unit"
          }
        },
        "description" : "The sum of all the UTXO per asset"
      },
      "tx_content_utxo_inputs" : {
        "required" : [ "address", "amount" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Input address",
            "example" : "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv"
          },
          "amount" : {
            "type" : "array",
            "example" : [ {
              "unit" : "lovelace",
              "quantity" : "42000000"
            }, {
              "unit" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
              "quantity" : "12"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/tx_content_output_amount"
            }
          }
        }
      },
      "tx_content_utxo_outputs" : {
        "required" : [ "address", "amount" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Output address",
            "example" : "addr1q9ld26v2lv8wvrxxmvg90pn8n8n5k6tdst06q2s856rwmvnueldzuuqmnsye359fqrk8hwvenjnqultn7djtrlft7jnq7dy7wv"
          },
          "amount" : {
            "type" : "array",
            "example" : [ {
              "unit" : "lovelace",
              "quantity" : "42000000"
            }, {
              "unit" : "b0d07d45fe9514f80213f4020e5a61241458be626841cde717cb38a76e7574636f696e",
              "quantity" : "12"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/tx_content_output_amount"
            }
          }
        }
      },
      "tx_content_pool_certs_metadata" : {
        "required" : [ "description", "hash", "homepage", "name", "ticker", "url" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "URL to the stake pool metadata",
            "nullable" : true,
            "example" : "https://stakenuts.com/mainnet.json"
          },
          "hash" : {
            "type" : "string",
            "description" : "Hash of the metadata file",
            "nullable" : true,
            "example" : "47c0c68cb57f4a5b4a87bad896fc274678e7aea98e200fa14a1cb40c0cab1d8c"
          },
          "ticker" : {
            "type" : "string",
            "description" : "Ticker of the stake pool",
            "nullable" : true,
            "example" : "NUTS"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the stake pool",
            "nullable" : true,
            "example" : "Stake Nuts"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the stake pool",
            "nullable" : true,
            "example" : "The best pool ever"
          },
          "homepage" : {
            "type" : "string",
            "description" : "Home page of the stake pool",
            "nullable" : true,
            "example" : "https://stakentus.com/"
          }
        }
      },
      "tx_content_pool_certs_relays" : {
        "required" : [ "dns", "dns_srv", "ipv4", "ipv6", "port" ],
        "type" : "object",
        "properties" : {
          "ipv4" : {
            "type" : "string",
            "description" : "IPv4 address of the relay",
            "nullable" : true,
            "example" : "4.4.4.4"
          },
          "ipv6" : {
            "type" : "string",
            "description" : "IPv6 address of the relay",
            "nullable" : true,
            "example" : "https://stakenuts.com/mainnet.json"
          },
          "dns" : {
            "type" : "string",
            "description" : "DNS name of the relay",
            "nullable" : true,
            "example" : "relay1.stakenuts.com"
          },
          "dns_srv" : {
            "type" : "string",
            "description" : "DNS SRV entry of the relay",
            "nullable" : true,
            "example" : "_relays._tcp.relays.stakenuts.com"
          },
          "port" : {
            "type" : "integer",
            "description" : "Network port of the relay",
            "example" : 3001
          }
        }
      },
      "tx_content_metadata_inner" : {
        "required" : [ "json_metadata", "label" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Metadata label"
          },
          "json_metadata" : {
            "description" : "Content of the metadata",
            "oneOf" : [ {
              "type" : "string"
            }, {
              "type" : "object"
            } ]
          }
        }
      },
      "tx_content_metadata_cbor_inner" : {
        "required" : [ "cbor_metadata", "label" ],
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Metadata label"
          },
          "cbor_metadata" : {
            "type" : "string",
            "description" : "Content of the CBOR metadata",
            "nullable" : true
          }
        }
      },
      "account_addresses_content_inner" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Address associated with the stake key"
          }
        }
      },
      "account_reward_content_inner" : {
        "required" : [ "amount", "epoch", "pool_id" ],
        "type" : "object",
        "properties" : {
          "epoch" : {
            "type" : "integer",
            "description" : "Epoch of the associated reward"
          },
          "amount" : {
            "type" : "string",
            "description" : "Rewards for given epoch in Lovelaces",
            "nullable" : true
          },
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 pool ID being delegated to"
          }
        }
      },
      "account_delegation_content_inner" : {
        "required" : [ "active_epoch", "amount", "pool_id", "tx_hash" ],
        "type" : "object",
        "properties" : {
          "active_epoch" : {
            "type" : "integer",
            "description" : "Epoch that the delegation becomes active",
            "example" : 210
          },
          "tx_hash" : {
            "type" : "string",
            "description" : "Hash of the transaction containing the delegation"
          },
          "amount" : {
            "type" : "string",
            "description" : "Rewards for given epoch in Lovelaces",
            "nullable" : true
          },
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 ID of pool being delegated to"
          }
        }
      },
      "account_history_content_inner" : {
        "required" : [ "active_epoch", "amount", "pool_id" ],
        "type" : "object",
        "properties" : {
          "epoch" : {
            "type" : "integer",
            "description" : "Epoch that the stake is active",
            "example" : 210
          },
          "amount" : {
            "type" : "string",
            "description" : "Stake amount in Lovelaces",
            "nullable" : true
          },
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 ID of pool being delegated to"
          }
        }
      },
      "account_registration_content_inner" : {
        "required" : [ "action", "tx_hash" ],
        "type" : "object",
        "properties" : {
          "tx_hash" : {
            "type" : "string",
            "description" : "Hash of the transaction containing the (de)registration certificate"
          },
          "action" : {
            "type" : "string",
            "description" : "Action in the certificate",
            "enum" : [ "registered", "deregistered" ]
          }
        }
      },
      "address_utxo_content_inner" : {
        "type" : "object",
        "properties" : {
          "tx_hash" : {
            "type" : "string",
            "description" : "Transaction hash of the UTXO"
          },
          "tx_index" : {
            "type" : "integer",
            "description" : "UTXO index in the transaction",
            "deprecated" : true
          },
          "output_index" : {
            "type" : "integer",
            "description" : "UTXO index in the transaction"
          },
          "amount" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "unit" : {
                  "type" : "string",
                  "description" : "The unit of the value",
                  "format" : "Lovelace or concatenation of asset policy_id and hex-encoded asset_name"
                },
                "quantity" : {
                  "type" : "string",
                  "description" : "The quantity of the unit"
                }
              },
              "description" : "The sum of all the UTXO per asset"
            }
          },
          "block" : {
            "type" : "string",
            "description" : "Block number of the UTXO"
          }
        }
      },
      "tx_metadata_labels_inner" : {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Metadata label"
          },
          "cip10" : {
            "type" : "string",
            "description" : "CIP10 defined description",
            "nullable" : true
          },
          "count" : {
            "type" : "string",
            "description" : "The count of metadata entries with a specific label"
          }
        }
      },
      "tx_metadata_label_json_inner" : {
        "required" : [ "json_metadata", "tx_hash" ],
        "type" : "object",
        "properties" : {
          "tx_hash" : {
            "type" : "string",
            "description" : "Transaction hash that contains the specific metadata"
          },
          "json_metadata" : {
            "description" : "Content of the JSON metadata",
            "nullable" : true,
            "anyOf" : [ {
              "type" : "string"
            }, {
              "type" : "object"
            }, {
              "type" : "array",
              "items" : { }
            }, {
              "type" : "integer"
            }, {
              "type" : "number"
            }, {
              "type" : "boolean"
            } ]
          }
        }
      },
      "tx_metadata_label_cbor_inner" : {
        "required" : [ "cbor_metadata", "tx_hash" ],
        "type" : "object",
        "properties" : {
          "tx_hash" : {
            "type" : "string",
            "description" : "Transaction hash that contains the specific metadata"
          },
          "cbor_metadata" : {
            "type" : "string",
            "description" : "Content of the CBOR metadata",
            "nullable" : true
          }
        }
      },
      "pool_list_retire_inner" : {
        "type" : "object",
        "properties" : {
          "pool_id" : {
            "type" : "string",
            "description" : "Bech32 encoded pool ID",
            "example" : "pool1z5uqdk7dzdxaae5633fqfcu2eqzy3a3rgtuvy087fdld7yws0xt"
          },
          "epoch" : {
            "type" : "integer",
            "description" : "Retirement epoch number",
            "example" : 242
          }
        }
      },
      "pool_history_inner" : {
        "required" : [ "active_size", "active_stake", "blocks", "delegators_count", "epoch", "fees", "rewards" ],
        "type" : "object",
        "properties" : {
          "epoch" : {
            "type" : "integer",
            "description" : "Epoch number",
            "example" : 233
          },
          "blocks" : {
            "type" : "integer",
            "description" : "Number of blocks created by pool",
            "example" : 22
          },
          "active_stake" : {
            "type" : "string",
            "description" : "Active (Snapshot of live stake 2 epochs ago) stake in Lovelaces",
            "example" : "20485965693569"
          },
          "active_size" : {
            "type" : "number",
            "description" : "Pool size (percentage) of overall active stake at that epoch",
            "example" : 1.2345
          },
          "delegators_count" : {
            "type" : "integer",
            "description" : "Number of delegators for epoch",
            "example" : 115
          },
          "rewards" : {
            "type" : "string",
            "description" : "Total rewards received before distribution to delegators",
            "example" : "206936253674159"
          },
          "fees" : {
            "type" : "string",
            "description" : "Pool operator rewards",
            "example" : "1290968354"
          }
        }
      },
      "pool_relays_inner" : {
        "type" : "object",
        "properties" : {
          "ipv4" : {
            "type" : "string",
            "description" : "IPv4 address of the relay",
            "nullable" : true,
            "example" : "4.4.4.4"
          },
          "ipv6" : {
            "type" : "string",
            "description" : "IPv6 address of the relay",
            "nullable" : true,
            "example" : "https://stakenuts.com/mainnet.json"
          },
          "dns" : {
            "type" : "string",
            "description" : "DNS name of the relay",
            "nullable" : true,
            "example" : "relay1.stakenuts.com"
          },
          "dns_srv" : {
            "type" : "string",
            "description" : "DNS SRV entry of the relay",
            "nullable" : true,
            "example" : "_relays._tcp.relays.stakenuts.com"
          },
          "port" : {
            "type" : "integer",
            "description" : "Network port of the relay",
            "example" : 3001
          }
        }
      },
      "pool_delegations_inner" : {
        "required" : [ "cert_index", "tx_hash" ],
        "type" : "object",
        "properties" : {
          "tx_hash" : {
            "type" : "string",
            "description" : "Transaction ID"
          },
          "cert_index" : {
            "type" : "integer",
            "description" : "Certificate within the transaction"
          }
        }
      },
      "pool_updates_inner" : {
        "required" : [ "action", "cert_index", "tx_hash" ],
        "type" : "object",
        "properties" : {
          "tx_hash" : {
            "type" : "string",
            "description" : "Transaction ID"
          },
          "cert_index" : {
            "type" : "integer",
            "description" : "Certificate within the transaction"
          },
          "action" : {
            "type" : "string",
            "description" : "Action in the certificate",
            "enum" : [ "registered", "deregistered" ]
          }
        }
      },
      "pool_delegators_inner" : {
        "required" : [ "address", "live_stake" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Bech32 encoded stake addresses"
          },
          "live_stake" : {
            "type" : "string",
            "description" : "Currently delegated amount"
          }
        }
      },
      "assets_inner" : {
        "required" : [ "asset", "quantity" ],
        "type" : "object",
        "properties" : {
          "asset" : {
            "type" : "string",
            "description" : "Asset identifier",
            "format" : "Concatenation of the policy_id and hex-encoded asset_name"
          },
          "quantity" : {
            "type" : "string",
            "description" : "Current asset quantity"
          }
        }
      },
      "asset_metadata" : {
        "required" : [ "description", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Asset name",
            "example" : "nutcoin"
          },
          "description" : {
            "type" : "string",
            "description" : "Asset description",
            "example" : "The Nut Coin"
          },
          "ticker" : {
            "type" : "string",
            "nullable" : true,
            "example" : "nutc"
          },
          "url" : {
            "type" : "string",
            "description" : "Asset website",
            "nullable" : true,
            "example" : "https://www.stakenuts.com/"
          },
          "logo" : {
            "type" : "string",
            "description" : "Base64 encoded logo of the asset",
            "nullable" : true,
            "example" : "iVBORw0KGgoAAAANSUhEUgAAADAAAAAoCAYAAAC4h3lxAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QA/wD/AP+gvaeTAAAAB3RJTUUH5QITCDUPjqwFHwAAB9xJREFUWMPVWXtsU9cZ/8499/r6dZ3E9rUdO7ZDEgglFWO8KaOsJW0pCLRKrN1AqqYVkqoqrYo0ja7bpElru1WairStFKY9WzaE1E1tx+jokKqwtqFNyhKahEJJyJNgJ37E9r1+3HvO/sFR4vhx7SBtfH/F3/l93/f7ne/4PBxEKYU72dj/ZfH772v1TU+HtqbTaX8wOO01GPQpRVH7JEm+vGHDuq6z7/8jUSoHKtaBKkEUFUXdajDy1hUrmrs6zn/wWS7m7pZVjMUirKGUTnzc+e9xLcTrPPVfZzDz06Sc2lyQGEIyAPzT7Xa+dvE/3e+XLaCxoflHsVj8MAAYs74aa/WHoenwvpkZKeFy2Z5NJlOPUkqXZccFwSSrKjlyffjLH+TL6XTUGTGL/6hklD3ldIrj2M5MRmkLBMcvaRLQ1Nj88sxM/HCBfMP+eu/OYGDqe6l0WmpoqJ/88upgrU7HrQNA/cFg6MlkKiLlBtVUO40cx54BgHvLIT/HJLvdeqh/4NKxogKWN7fsCoUi7xTLxLJ4vLq6ak//wKVOrdXtttrTDMPsqJA8AAAwDErdu3VL3alTf5ma9eWCpoKhn5dKpCiqJxicPucQPVu0FHaInn35yHMcKwPAa4SQ3QCwFgDWUko3qSr5vqqSgTypuEg4Mo/zvA74/Y0rZSnZU8akSHV17k2fXfy0txjI5224kEym1s/1EUI7LBbztweHrkzkizn49LP6U6feepFSeggAQK/n04SQZ8bGrxdeQjZrbRvGzLH5hcibRqOhPplMfS1fIY5jz4xPDBdcGggho2h3z9sOLRazdG3wqp9SMgUlzGZ17SSEPsRx7J8CwfGu3PF57WhqqjfN/VxVJUxKUrIdITAXKpDJKFscosdfaFy0u+/K9aXTmXe0kAcAmA5Nng5Hbj6Tj/wCAYFAcN7uEY3GXGazMSHLqVVFapgBoMPna9yqhRAAgCTJMa3YUjZPgNFkSlWYx5eUkx+0tKx83V3rF+cVYJjruWCe133DIXqMmrNrFSDabRcWkywYmG5XFOW6aHcfb9324CoAgMmbo9MIoXkneCajiAihV/c/8eSiBSw4BxyiZxQA6m7H7FBKT2CMn2MY5jFFUX6ZO+5w2j8aHZ7YH40FByrJD5DnHGAY5uTtIA8AgBDaR4F2Yxb3WizCgmtA4ObUPSazodduqz3Suu0hf0U1cjvgdNSJ1dWWveFwdDUAtAiC2Uopdcdi8c9Zlh3GmDGl05mtAKAvo47EcdwThJCjqqpWFxALlNITomg73tff21GRAJez7iVK4WGGYfoJIQduBsbm7UrLm1ueCoUiv65kpiilw1ZbzcFoZOYoIcRTAn6eYZgXJm+Oni+Vd3YJbdyweSch9HlK6SpVVfcyDDq7Yf3m2XPBIXraKyV/a4b9UkLawbLsZgB4rwR8CyGkw13r+5fX27BckwBAEJ47oKpk8+DgUIdod7fV1vqOAMDrlZLPmqKoB+rrvXIgOP6w0WjYy3Ls5RL4bUk52bVm9fqnCk7M3CXU2ND8+MxM7BcIIftiyRYyntcdHh0bmr0wfmXl6p2SJB2KRmP3l4j7zejYUFtRAQAAgslm1Bv4nyGEDpYiIwjmjw0G/RjP866JiclNqqqWfKLq9fyZkdHBBXcnl9O71GDgD8bj0ncRQqZ8sRgzL9yYHH2pqICsOUTPLgA4CXNeZFmzWIS/YhYfjUZmvqPjuceSckrz25pS2h2cmlhbaBwhzr6kfsnL8Xhif55YYFl23Y3Jkdl7EVMoUSA4/q6qqNsBIPd11e52u45FwtG3CSH7yiEPAGC1Vt9dXGBmanDoygFLlbAjtzZCCMyC6VeaOpA1l9N7l1kwtauKaozHE28YTQaQpeR7+TqjxXheR0fHhhgt2CX1S3clEtKC16HL5djYe+niBU0CcmYA2W21/Qih5ZqDcoxlMZ24MaJJAABA87IVJ8Lh6N65Pr1B/+LIyLUfAhRZQvnM6ah7ZDHkAQB0vK6/HHxNTc2ruT5Zkldn/y5LACFk+2LIAwAwCGl6yGSt88KHXbmrBCHkqEgAz+vWLFZALJb4qNwYhFDhCSknkSwnQ4sVgDFeWg7+gQe2r1tAmkGTFQlACHWVg89nhJA9ot3dphV/eeCLp/Pw6K5IQP0S39uLFXCLwDG7zf1cKZxD9LSlUunHc/12u/2t2Vzl/rzu8zb8PZlM7bwdQgDgPK/nX2nddt+53//ht3LW2dS0fF0iLj2vquojuQFmwXRucPBKa8UCmpe1iOFwpAsAfLdJBFBKwVIlXJ2JxqKCxbwyHkvoCkAlv9/71U+7Oq+UJWDZ0hViJBL1cRynbNq0sSeeiPl6ei4NqIqq6TSmlB7X6bjuTEY5pgWfzwxGPZhMpt39/b3vzvWXFGCzulZjjM/DrauDwcAr8bjcgzGjZUuVBMH8k2uDX7wCAFDr8n2LEPI7SqmhTP6SzVbz6MDlz0/nDpT8EmOM22HOvUeWU2wp8iyLgRL6hk7Hrc2SBwC4MTlykmXZRozxn00mbVcphNA5jJmV+chr6oDd5l6jN/A/TqfSuwEAGITGMIsvGo3GTwTB3Dc2NjGSxdZYq4VIOOoNBANnKE0XPXE3brjHOTQ08k2MmVZOxzVJCbkFIQSCYEphzPaFQuGzTpfjb319PZ8UFXin/5OvrHPg/9HueAH/BSUqOuNZm4fyAAAAJXRFWHRkYXRlOmNyZWF0ZQAyMDIxLTAyLTE5VDA4OjUyOjI1KzAwOjAwCmFGlgAAACV0RVh0ZGF0ZTptb2RpZnkAMjAyMS0wMi0xOVQwODo1MjoyMyswMDowMBjsyxAAAAAASUVORK5CYII="
          }
        }
      },
      "asset_history_inner" : {
        "required" : [ "action", "amount", "tx_hash" ],
        "type" : "object",
        "properties" : {
          "tx_hash" : {
            "type" : "string",
            "description" : "Hash of the transaction containing the asset action"
          },
          "action" : {
            "type" : "string",
            "description" : "Action executed upon the asset policy",
            "enum" : [ "minted", "burned" ]
          },
          "amount" : {
            "type" : "string",
            "description" : "Asset amount of the specific action"
          }
        }
      },
      "asset_addresses_inner" : {
        "required" : [ "address", "quantity" ],
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string",
            "description" : "Address containing the specific asset"
          },
          "quantity" : {
            "type" : "string",
            "description" : "Asset quantity on the specific address"
          }
        }
      },
      "asset_policy_inner" : {
        "required" : [ "asset", "quantity" ],
        "type" : "object",
        "properties" : {
          "asset" : {
            "type" : "string",
            "description" : "Concatenation of the policy_id and hex-encoded asset_name"
          },
          "quantity" : {
            "type" : "string",
            "description" : "Current asset quantity"
          }
        }
      },
      "metrics_inner" : {
        "required" : [ "calls", "time" ],
        "type" : "object",
        "properties" : {
          "time" : {
            "type" : "integer",
            "description" : "Starting time of the call count interval (ends midnight UTC) in UNIX time"
          },
          "calls" : {
            "type" : "integer",
            "description" : "Sum of all calls for a particular day"
          }
        }
      },
      "metrics_endpoints_inner" : {
        "required" : [ "calls", "endpoint", "time" ],
        "type" : "object",
        "properties" : {
          "time" : {
            "type" : "integer",
            "description" : "Starting time of the call count interval (ends midnight UTC) in UNIX time"
          },
          "calls" : {
            "type" : "integer",
            "description" : "Sum of all calls for a particular day and endpoint"
          },
          "endpoint" : {
            "type" : "string",
            "description" : "Endpoint parent name"
          }
        }
      }
    },
    "responses" : {
      "overusage_limit" : {
        "description" : "Usage limit reached",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_429"
            }
          }
        }
      },
      "autobanned" : {
        "description" : "IP has been auto-banned for extensive sending of requests after usage limit has been reached",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_418"
            }
          }
        }
      },
      "not_found" : {
        "description" : "Component not found",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_404"
            }
          }
        }
      },
      "internal_server_error" : {
        "description" : "Internal Server Error",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_500"
            }
          }
        }
      },
      "unauthorized_error" : {
        "description" : "Authentication secret is missing or invalid",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_403"
            }
          }
        }
      },
      "bad_request" : {
        "description" : "Bad request",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_response_400"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "name" : "project_id",
        "in" : "header"
      }
    }
  }
}